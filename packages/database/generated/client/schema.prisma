generator client {
  provider      = "prisma-client-js"
  output        = "./../generated/client"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Company {
  id          String        @id @default(dbgenerated("gen_random_uuid()"))
  employee    Employee[]
  customer    Customer[]
  revenue     Revenue[]
  expense     Expense[]
  service     Service[]
  invoice     Invoice[]
  appointment Appointment[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Employee {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  username  String   @unique
  email     String?  @unique
  name      String
  role      String
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  id            Int          @id @default(autoincrement())
  companyId     String
  company       Company      @relation(fields: [companyId], references: [id])
  paymentType   PaymentType?
  customerId    String
  customer      Customer     @relation(fields: [customerId], references: [id])
  appointmentId Int?
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  status        Status
  services      Service[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Service {
  id            Int          @id @default(autoincrement())
  companyId     String
  company       Company      @relation(fields: [companyId], references: [id])
  serviceType   ServiceType
  price         Int
  quantity      Int
  vehicleType   Vehicle
  code          String
  notes         String?
  distributor   Distributor
  invoice       Invoice?     @relation(fields: [invoiceId], references: [id])
  invoiceId     Int?
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  appointmentId Int?
  revenues      Revenue[]
  materialCost  String?
  costBeforeGst String?
  gasCost       String?
  shopFees      String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Appointment {
  id          Int       @id @default(autoincrement())
  title       String
  startTime   DateTime
  endTime     DateTime
  description String?
  services    Service[]
  invoice     Invoice[]
  customerId  String?
  customer    Customer? @relation(fields: [customerId], references: [id])
  companyId   String
  company     Company   @relation(fields: [companyId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Customer {
  id             String        @id @default(dbgenerated("gen_random_uuid()"))
  firstName      String
  lastName       String?
  city           String?
  email          String        @unique
  phone          String        @unique
  postalCode     String?
  streetAddress1 String
  streetAddress2 String?
  notes          String?
  subscription   Boolean?
  returnCounter  Int?
  lastVisit      DateTime      @default(now())
  invoices       Invoice[]
  appointments   Appointment[]
  company        Company       @relation(fields: [companyId], references: [id])
  companyId      String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Revenue {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  totalWindshields Int
  totalChipRepairs Int
  totalWarranties  Int

  grossSales    Float
  grossSalesGst Float?
  costBeforeGst Int?
  costAfterGst  Float?
  gstOnJob      Float?
  gasCost       Float?
  materialCost  Int
  shopFees      Float?
  labour        Float?
  jobNet        Int?
  subNet        Int?
  trueNet       Int?

  visa       Int
  mastercard Int
  debit      Int
  cash       Int
  etransfer  Int
  amex       Int

  newClients    Int?
  repeatClients Int?
  serviceId     Int?
  service       Service? @relation(fields: [serviceId], references: [id])
  companyId     String
  company       Company  @relation(fields: [companyId], references: [id])
}

model Expense {
  id          Int         @id @default(autoincrement())
  description String
  cost        Float
  date        DateTime
  paymentType PaymentType
  companyId   String
  company     Company     @relation(fields: [companyId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum PaymentType {
  Debit
  Mastercard
  Cash
  Amex
  Visa
  Cheque
  ETransfer
  Other
}

enum ServiceType {
  Windshield
  DoorGlass
  BackGlass
  Sunroof
  Mirror
  QuarterGlass
  ChipSubscription
  Warranty
}

enum Vehicle {
  Suv
  Truck
  Sedan
  Minivan
  Convertible
  Hatchback
  Coupe
}

enum Distributor {
  A
  M
  O
}

enum Status {
  Draft
  Pending
  Paid
  Overdue
}
